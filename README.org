#+title: Self Repaying ETH
#+author: Wary

The =Self Repaying ETH= contract is a smart contract helper which simplifies the borrowing of =ETH= debt with =Alchemix= üßô‚Äçü™Ñüí∏. It mints =ETH= debt (i.e. =alETH=) from an =Alchemix= account and exchange it for =ETH= using =Curve=.


* üåç Overview

The =Self Repaying ETH= is a smart contract written in Solidity that uses:
- the [[https://alchemix.fi/][Alchemix Protocol]] to manage users self repaying debt
- the [[https://curve.fi][Curve Protocol]] to exchange =alETH= for =WETH=
- the [[https://ethereum.org/en/wrapped-eth][WETH contract]] to convert =WETH= to =ETH=


* üßê How to use

** To use the =Self Repaying ETH= feature in your smart contract, you need to:
- Make your SC inherit the =SelfRepayingETH= (aka =sreth=) contract
- Borrow some =Self Repaying ETH= from an =Alchemix= account by calling =_borrowSelfRepayingETHFrom(<account>, <amount>)=. It mints =alETH= debt to your SC, exchange it for =WETH= using the =Curve= exchange and then convert it to =ETH=
‚ö† Because of the =alETH= to =WETH= exchange slippage protection, the contract will have some leftover =ETH= so it will send it back to the =<account>=.

** To use your SC, your users need to:
- Deposit enough =ETH= funds to the =alETH AlchemistV2= contract
- Allow the your contract to mint enough =alETH= debt to cover future borrows by calling =alchemistV2.approveMint(<your contract>, <amount>)=


* üöö How to install

‚ö† Prerequisites:
- [[https://git-scm.com/downloads][git]]
- [[https://www.rust-lang.org/][rust]]
- [[https://book.getfoundry.sh/getting-started/installation][foundry]]

Clone this repository and install the dependencies
#+begin_src bash
git clone git@github.com:The-Wary-One/self-repaying-eth.git
mkdir self-repaying-eth
forge install
#+end_src


* üë∑ How to test

The tests needs to be run in a Mainnet fork.
Set the environment variables with your API keys
#+begin_src bash
cat .env.example > .env
vim .env
#+end_src

Run the tests
#+begin_src bash
forge test
#+end_src
